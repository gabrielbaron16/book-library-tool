openapi: 3.0.3
info:
  title: Book Library Tool API
  version: 1.0.0
tags:
  - name: Books
    description: Endpoints related to books
  - name: Users
    description: Endpoints related to users
  - name: Reservations
    description: Endpoints related to reservations
paths:
  /books:
    post:
      tags:
        - Books
      summary: Add new book
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
            examples:
              example-1:
                summary: A sample book
                value:
                  bookId: "5345346X12"
                  title: "The Great Gatsby"
                  author: "F. Scott Fitzgerald"
                  publicationYear: 1925
                  publisher: "Scribner"
                  price: 10.99
      responses:
        "201":
          description: Book added
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Invalid request example
                  value:
                    message: "Invalid input data"
                    code: 400
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Unexpected error example
                  value:
                    message: "Unexpected error occurred"
                    code: 500
  /books/{id}:
    get:
      tags:
        - Books
      summary: Get a book by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Book found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
              examples:
                example-1:
                  summary: A sample book response
                  value:
                    bookId: "1"
                    title: "The Great Gatsby"
                    author: "F. Scott Fitzgerald"
                    publicationYear: 1925
                    publisher: "Scribner"
                    price: 10.99
                    stock: 100
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Book not found example
                  value:
                    message: "Book not found"
                    code: 404
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Unexpected error example
                  value:
                    message: "Unexpected error occurred"
                    code: 500
    delete:
      tags:
        - Books
      summary: Delete a book by id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Book deleted
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Invalid request example
                  value:
                    message: "Invalid input data"
                    code: 400
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Book not found example
                  value:
                    message: "Book not found"
                    code: 404
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Unexpected error example
                  value:
                    message: "Unexpected error occurred"
                    code: 500
  /books/search:
    get:
      tags:
        - Books
      summary: Search books by title, author, or publication year
      parameters:
        - name: title
          in: query
          description: Filter by book title (optional)
          schema:
            type: string
        - name: author
          in: query
          description: Filter by author name (optional)
          schema:
            type: string
        - name: publicationYear
          in: query
          description: Filter by publication year (optional)
          schema:
            type: integer
            minimum: 1000
            maximum: 9999
        - name: page
          in: query
          required: true
          description: Page number
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: true
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      responses:
        "200":
          description: List of books matching the search criteria
          content:
            application/json:
              schema:
                type: object
                properties:
                  books:
                    type: array
                    items:
                      $ref: "#/components/schemas/Book"
                  totalRecords:
                    type: integer
              examples:
                example-1:
                  summary: A sample search response
                  value:
                    books:
                      - bookId: "1"
                        title: "The Great Gatsby"
                        author: "F. Scott Fitzgerald"
                        publicationYear: 1925
                        publisher: "Scribner"
                        price: 10.99
                        stock: 100
                      - bookId: "2"
                        title: "To Kill a Mockingbird"
                        author: "Harper Lee"
                        publicationYear: 1960
                        publisher: "J.B. Lippincott & Co."
                        price: 7.99
                        stock: 50
                    totalRecords: 2
        "400":
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Invalid search parameters example
                  value:
                    message: "Invalid search parameters"
                    code: 400
        "404":
          description: No books found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: No books found example
                  value:
                    message: "No books found"
                    code: 404
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Unexpected error example
                  value:
                    message: "Unexpected error occurred"
                    code: 500
  /users:
    post:
      tags:
        - Users
      summary: Create a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            examples:
              example-1:
                summary: A sample user
                value:
                  email: "user@example.com"
                  balance: 100.0
      responses:
        "201":
          description: User created
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Invalid request example
                  value:
                    message: "Invalid input data"
                    code: 400
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Unexpected error example
                  value:
                    message: "Unexpected error occurred"
                    code: 500

  /users/{email}/balance:
    patch:
      tags:
        - Users
      summary: Update user balance
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - balance
              properties:
                balance:
                  type: number
            examples:
              example-1:
                summary: Update balance example
                value:
                  balance: 150.0
      responses:
        "200":
          description: Balance updated
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Invalid request example
                  value:
                    message: "Invalid input data"
                    code: 400
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: User not found example
                  value:
                    message: "User not found"
                    code: 404
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Unexpected error example
                  value:
                    message: "Unexpected error occurred"
                    code: 500
  /reservations:
    post:
      tags:
        - Reservations
      summary: Add new reservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Reservation"
            examples:
              example-1:
                summary: A sample reservation
                value:
                  userEmail: "gabrielbu161@gmail.com"
                  bookId: "5345346X12"
                  bookCount: 1
                  returnDate: "2025-03-30T12:30:00Z"
      responses:
        "201":
          description: Reservation added
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Invalid request example
                  value:
                    message: "Invalid input data"
                    code: 400
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Unexpected error example
                  value:
                    message: "Unexpected error occurred"
                    code: 500
  /reservations/finish/{id}:
    patch:
      tags:
        - Reservations
      summary: Return a book from specific reservation
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Reservation Finished
        "400":
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Invalid request example
                  value:
                    message: "Invalid input data"
                    code: 400
        "404":
          description: Reservation not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Reservation not found example
                  value:
                    message: "Reservation not found"
                    code: 404
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Unexpected error example
                  value:
                    message: "Unexpected error occurred"
                    code: 500
  /reservations/book/{bookId}:
    get:
      tags:
        - Reservations
      summary: Search Book Reservation History
      parameters:
        - name: bookId
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: true
          description: Page number
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: true
          description: Number of items per page
          schema:
            type: integer
            minimum: 1
            maximum: 1000
      responses:
        "200":
          description: List of reservations
          content:
            application/json:
              schema:
                type: object
                properties:
                  reservations:
                    type: array
                    items:
                      $ref: "#/components/schemas/Reservation"
                  totalRecords:
                    type: integer
              examples:
                example-1:
                  summary: A sample reservations response
                  value:
                    books:
                      - bookId: "14546FG"
                        email: "mondo@gmail.com"
                        bookCount: 1
                        returnDate: "2025-02-01T12:30:00Z"
                        reservationDate: "2025-03-07T15:30:00Z"
                        isReturned: true
                      - bookId: "5345346AQ"
                        email: "fabrik@gmail.com"
                        bookCount: 1
                        returnDate: "2025-03-01T12:30:00Z"
                        reservationDate: "2025-03-14T15:30:00Z"
                        isReturned: true
                    totalRecords: 2
        "400":
          description: Invalid search parameters
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Invalid search parameters example
                  value:
                    message: "Invalid search parameters"
                    code: 400
        "404":
          description: No reservations found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: No reservations found example
                  value:
                    message: "No reservations found"
                    code: 404
        "500":
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              examples:
                example-1:
                  summary: Unexpected error example
                  value:
                    message: "Unexpected error occurred"
                    code: 500
components:
  schemas:
    Book:
      type: object
      required:
        - bookId
        - title
        - author
        - publicationYear
        - publisher
        - price
        - stock
      properties:
        bookId:
          type: string
        title:
          type: string
        author:
          type: string
        publicationYear:
          type: integer
          minimum: 1400
          maximum: 2025
        publisher:
          type: string
        price:
          type: number
        stock:
          type: integer
          readOnly: true
    User:
      type: object
      required:
        - email
        - balance
      properties:
        email:
          type: string
          format: email
        balance:
          type: number
          minimum: 0.01
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
    Reservation:
      type: object
      required:
        - userEmail
        - bookId
        - bookCount
        - returnDate
      properties:
        id:
          type: string
          readOnly: true
        userEmail:
          type: string
        bookId:
          type: string
        bookCount:
          type: integer
          minimum: 1
          maximum: 3
        returnDate:
          type: string
          format: date-time
        reservationDate:
          type: string
          format: date-time
          readOnly: true
        isReturned:
          type: boolean
          readOnly: true
        realReturnDate:
          type: string
          format: date-time
          readOnly: true